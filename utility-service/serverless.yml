
service: utility-service
app: thesis-server

frameworkVersion: '3'

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "sns:Publish"
          Resource:
            - arn:aws:sns:*:*:*
        - Effect: "Allow"
          Action:
            - "sqs:sendmessage"
          Resource:
            - arn:aws:sqs:*:*:*
  httpApi:
    cors: true
    authorizers:
      cognitoAuth:
        type: "jwt"
        identitySource: $request.header.Authorization
        issuerUrl: ${file(../config.json):CognitoIssuerUrl}
        audience:
          - ${file(../config.json):CognitoIdClient}

  environment:
    DBHost: ${file(../config.json):DBHost}
    DBPort: ${file(../config.json):DBPort}
    DBUser: ${file(../config.json):DBUser}
    DBPass: ${file(../config.json):DBPass}
    DBName: ${file(./config.json):DBName}
    FIREBASE_KEY: ${file(../config.json):FirebaseKey}

package:
  patterns:
    - '!./**'
    - ./bin/**

functions:
  Home:
    handler: bin/home
    events:
    - httpApi:
        path: /home/{param}
        method: GET
        authorizer:
          name: cognitoAuth
  NavigationList:
    handler: bin/navigation-list
    events:
    - httpApi:
        path: /navigationlist/{param}
        method: GET
        authorizer:
          name: cognitoAuth
  NavigationCard:
    handler: bin/navigation-card
    events:
    - httpApi:
        path: /navigationcard/{param}
        method: GET
        authorizer:
          name: cognitoAuth
    - httpApi:
        path: /navigationcard
        method: POST
        authorizer:
          name: cognitoAuth
    - httpApi:
        path: /navigationcard
        method: PATCH
        authorizer:
          name: cognitoAuth
    - httpApi:
        path: /navigationcard
        method: DELETE
        authorizer:
          name: cognitoAuth
  LogList:
    handler: bin/log-list
    events:
    - httpApi:
        path: /loglist/{param}
        method: GET
        authorizer:
          name: cognitoAuth
  LogCard:
    handler: bin/log-card
    events:
    - httpApi:
        path: /logcard/{param}
        method: GET
        authorizer:
          name: cognitoAuth
    - httpApi:
        path: /logcard
        method: POST
        authorizer:
          name: cognitoAuth
    - httpApi:
        path: /logcard
        method: PATCH
        authorizer:
          name: cognitoAuth
    - httpApi:
        path: /logcard
        method: DELETE
        authorizer:
          name: cognitoAuth
  LogMessage:
    handler: bin/log-message
    events:
      - sqs:
          arn: !GetAtt LogMessageQueue.Arn
          batchSize: 1

resources:
  Resources:
    LogMessageQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: LogMessage.fifo
        FifoQueue: true
        ContentBasedDeduplication: true
